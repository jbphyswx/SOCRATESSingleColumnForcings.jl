

using Dierckx
include("../src/interpolating_methods.jl")
using NCDatasets

# ============================================== #
using Plots
dpi = 600

outpath = expanduser("~/Research_Schneider/CliMa/SOCRATESSingleColumnForcings.jl/test/")
if !isdir(joinpath(outpath, "pchip_test"))
    mkdir(joinpath(outpath, "pchip_test"))
end


# ============================================================================================ #

FT = Float64
flight_number = 13
forcing_str = "Obs"
initial_condition = true

reload_SSCF = true
if @isdefined(old_flight_number) && flight_number != old_flight_number
    reload_SSCF = true # force reload if flight number changes and we forgot to update
    old_flight_number = flight_number
    @info("flight number changed, forcing reload of SSCF")
end
if reload_SSCF
    using Pkg
    using Revise
    Pkg.activate(expanduser("~/Research_Schneider/CliMa/SOCRATESSingleColumnForcings.jl/test"))
    import CLIMAParameters as CP # use CLIMAParameters = "0.7, 0.8, 0.9, 0.10"
    # import ClimaParams as CPP # would using this trouble w/ TC.jl? it's a different uuid technically..., use ClimaParams = "0.10"
    import Thermodynamics as TD
    import Thermodynamics.Parameters as TDP
    # FT = Float64

    toml_dict = CP.create_toml_dict(FT; dict_type = "alias") # CP 0.7 and below, Thermodynamics 0.11 and above
    aliases = string.(fieldnames(TDP.ThermodynamicsParameters))
    param_pairs = CP.get_parameter_values!(toml_dict, aliases, "Thermodynamics")
    thermo_params = TDP.ThermodynamicsParameters{FT}(; param_pairs...)
    Pkg.activate(expanduser("~/Research_Schneider/CliMa/SOCRATESSingleColumnForcings.jl/"))
    include(
        "/home/jbenjami/Research_Schneider/CliMa/SOCRATESSingleColumnForcings.jl/src/SOCRATESSingleColumnForcings.jl",
    )

    # get sscf output
    SSCFout = Main.SOCRATESSingleColumnForcings.process_case(
        flight_number;
        thermo_params = thermo_params,
        initial_condition = initial_condition,
        use_LES_output_for_z = false,
    )
    SSCFout_lesz = Main.SOCRATESSingleColumnForcings.process_case(
        flight_number;
        thermo_params = thermo_params,
        initial_condition = initial_condition,
        use_LES_output_for_z = true,
    )
    # get old z
    SSCFout_z_old = Main.SOCRATESSingleColumnForcings.process_case(
        flight_number;
        thermo_params = thermo_params,
        initial_condition = initial_condition,
        use_LES_output_for_z = false,
        return_old_z = true,
    )
    SSCFout_z_old_lesz = Main.SOCRATESSingleColumnForcings.process_case(
        flight_number;
        thermo_params = thermo_params,
        initial_condition = initial_condition,
        use_LES_output_for_z = true,
        return_old_z = true,
    )
end
redo_SSCF_postprocessing = false
if redo_SSCF_postprocessing | reload_SSCF
    @info("redoing post processing")
    z_SSCF = Main.SOCRATESSingleColumnForcings.open_atlas_les_input(flight_number)[:grid_data]
    old_z = SSCFout_z_old[:obs_data][:, :, :, 1][:]
    old_z_lesz = SSCFout_z_old_lesz[:obs_data][:, :, :, 1][:]

    old_z = reverse(old_z) # so it can be used for interpolation, it must be increasing

    # read input data
    SOCRATES_input_path = "/home/jbenjami/Research_Schneider/CliMa/SOCRATESSingleColumnForcings.jl/Data/Atlas_LES_Profiles/Input_Data/"
    LES_forcing_str = forcing_str == "Obs" ? "obs" : "ERA5"
    LES_forcing_suffix = forcing_str == "Obs" ? ".nc" : "_mar18_2022.nc"
    LES_input_file =
        "RF" * string(flight_number, pad = 2) * "_" * LES_forcing_str * "-based_SAM_input" * LES_forcing_suffix
    LES_in_data = NCDatasets.Dataset(joinpath(SOCRATES_input_path, LES_input_file), "r") # technically there's some time editing we should do for this but we can put it off for obs
    input_lev = LES_in_data["lev"][:] / 100
    input_p_L = LES_in_data["lev"][:] / 100

    # cutoff top of plot in p
    p_cutoff = 550
    valid = input_p_L .> p_cutoff
    old_z_L = reverse(old_z[2:end])# take off the surface value (though it may have been inserted somewhere.... so technically this isn't right...)
    input_p_L = input_p_L[valid]

end

# ============================================================================================ #



# x_0 = FT.(collect(1:100:450))
x_0 = FT.(collect(100:100:550))

x_0 = FT.(collect(1:100:450))
y_0 = []

f(x) = sind(x) * x - log(abs(x))
y_0 = f.(x_0)
xx = (x_0[1] - 50):1:(x_0[end] + 50)

spl_extrap = pyinterp(xx, x_0, y_0; method = :pchip, bc = "extrapolate", return_spl = true)
y_spl_extrap = spl_extrap.(xx)

spl_smooth = pyinterp(
    xx,
    x_0,
    y_0;
    method = :pchip_smooth_derivative,
    bc = "extrapolate",
    return_spl = true,
    f_enhancement_factor = 2,
    f_p_enhancement_factor = 4,
)

y_spl_smooth = spl_smooth.(xx)



# plot fcn
plot(
    x_0,
    y_0,
    label = "y(x)",
    lw = 2,
    legend = :bottomleft,
    dpi = dpi,
    marker = :circle,
    markersize = 5.0,
    markerstrokewidth = 0.2,
    color = :black,
)
plot!(xx, y_spl_extrap, label = "pchip_extrap(x)", lw = 2, linestyle = :dot, color = :red)
plot!(xx, y_spl_smooth, label = "pchip_smooth(x)", lw = 2, linestyle = :dot, color = :blue)

savefig(joinpath(outpath, "pchip_test", "f(x).png"))

# plot derivative
dspl_extrap_dx = ForwardDiff.derivative.(Ref(spl_extrap), xx)
dspl_smooth_dx = ForwardDiff.derivative.(Ref(spl_smooth), xx)


dfdx = ForwardDiff.derivative.(f, xx)
dfdx_x_0 = ForwardDiff.derivative.(f, x_0)

plot(
    xx,
    dfdx,
    label = "df/dx",
    lw = 2,
    legend = :bottomleft,
    dpi = dpi,
    marker = :circle,
    markersize = 1.0,
    markerstrokewidth = 0.2,
    color = :black,
)

scatter!(x_0, dfdx_x_0, markersize = 5.0, markerstrokewidth = 0.2, color = :black, label = :none)
plot!(
    xx,
    dspl_extrap_dx,
    lw = 1,
    marker = :circle,
    markersize = 1.0,
    markerstrokewidth = 0.2,
    label = "dspl_extrap_dx",
    color = :red,
)
plot!(
    xx,
    dspl_smooth_dx,
    lw = 1,
    marker = :circle,
    markersize = 1.0,
    markerstrokewidth = 0.2,
    label = "dspl_smooth_dx",
    color = :blue,
)
savefig(joinpath(outpath, "pchip_test", "dfdx.png"))


# ================================================================================================================================================================ #
# new_z = [6.25, 24.48, 47.875, 70.11, 91.135, 110.92500000000001, 129.47, 146.775, 162.875, 177.825, 191.69, 204.565, 216.57, 227.835, 238.51, 248.775, 258.83, 268.83, 278.83, 288.83, 298.83, 308.83, 318.83, 328.83, 338.83, 348.83, 358.83, 368.83, 378.83, 388.83, 398.83, 408.83, 418.83, 428.83, 438.83, 448.83, 458.83, 468.83, 478.83, 488.83, 498.83, 508.83000000000004, 518.83, 528.83, 538.83, 548.83, 558.83, 568.83, 578.83, 588.83, 598.83, 608.83, 618.83, 628.83, 638.83, 648.83, 658.83, 668.83, 678.83, 688.83, 698.83, 708.83, 718.83, 728.83, 738.83, 748.83, 758.83, 768.83, 778.83, 788.83, 798.83, 808.83, 818.83, 828.83, 838.83, 848.83, 858.83, 868.83, 878.83, 888.83, 898.83, 908.83, 918.83, 928.83, 938.83, 948.83, 958.83, 968.83, 978.83, 988.83, 998.83, 1008.83, 1018.83, 1028.83, 1038.83, 1048.83, 1058.83, 1068.83, 1078.83, 1088.83, 1098.83, 1108.83, 1118.83, 1128.83, 1138.83, 1148.83, 1158.83, 1168.83, 1178.83, 1188.83, 1198.83, 1208.83, 1218.83, 1228.83, 1238.83, 1248.83, 1258.83, 1268.83, 1278.83, 1288.83, 1298.83, 1308.83, 1318.83, 1328.83, 1338.83, 1348.83, 1358.83, 1368.83, 1378.83, 1388.83, 1398.83, 1408.83, 1418.83, 1428.83, 1438.83, 1448.83, 1458.83, 1468.83, 1478.83, 1488.83, 1498.83, 1508.83, 1518.83, 1528.83, 1538.83, 1548.83, 1558.83, 1568.83, 1578.83, 1588.83, 1598.83, 1608.83, 1618.83, 1628.83, 1638.83, 1648.83, 1658.83, 1668.83, 1678.83, 1688.83, 1698.83, 1708.83, 1718.83, 1728.83, 1738.83, 1748.83, 1758.83, 1768.83, 1778.83, 1788.83, 1798.83, 1808.83, 1818.83, 1828.83, 1838.83, 1848.83, 1858.83, 1868.83, 1878.83, 1888.83, 1898.83, 1908.83, 1918.83, 1928.83, 1938.83, 1948.83, 1958.83, 1968.83, 1978.83, 1988.83, 1998.83, 2008.83, 2018.83, 2028.83, 2038.83, 2048.83, 2058.83, 2068.83, 2078.83, 2088.83, 2098.83, 2108.83, 2118.83, 2128.83, 2138.83, 2148.83, 2158.83, 2168.83, 2178.83, 2188.83, 2198.83, 2208.83, 2218.83, 2228.83, 2238.83, 2248.83, 2258.83, 2268.83, 2278.83, 2288.83, 2298.83, 2308.83, 2318.83, 2328.83, 2338.83, 2348.83, 2358.83, 2368.83, 2378.83, 2388.83, 2398.83, 2408.83, 2418.83, 2428.83, 2438.83, 2448.83, 2458.83, 2468.83, 2478.83, 2488.83, 2498.83, 2508.83, 2518.83, 2528.83, 2538.83, 2548.83, 2558.83, 2568.83, 2578.83, 2588.83, 2598.83, 2608.83, 2618.83, 2628.83, 2638.83, 2648.83, 2658.83, 2668.8450000000003, 2678.91, 2689.075, 2699.395, 2709.915, 2720.685, 2731.75, 2743.1549999999997, 2754.9449999999997, 2767.16, 2779.8450000000003, 2793.04, 2806.79, 2821.13, 2836.095, 2851.725, 2868.05, 2885.1099999999997, 2902.9449999999997, 2921.58, 2941.04, 2961.365, 2982.58, 3004.71, 3027.79, 3051.8450000000003, 3076.895, 3102.96, 3130.0699999999997, 3158.25, 3187.51, 3217.87, 3249.3599999999997, 3281.99, 3315.77, 3350.72, 3386.8549999999996, 3424.1899999999996, 3462.7349999999997, 3502.5, 3543.495, 3585.7250000000004, 3629.2, 3673.9300000000003, 3719.915, 3767.16, 3815.675, 3865.455, 3916.5, 3968.8100000000004, 4022.385, 4077.225, 4133.33, 4190.6900000000005, 4249.295, 4309.145, 4370.23, 4432.545, 4496.075000000001, 4560.8099999999995, 4626.74, 4693.85, 4762.13]
# old_z = [49016.5793075644, 43524.14361418918, 40344.120985314774, 36465.48750332606, 34004.69901079954, 31469.227732031584, 26681.360259984187, 23948.867484796476, 20546.016457980706, 18314.765750099687, 15947.088241232785, 14462.409337912199, 13247.745148906668, 12218.240268020056, 11321.214934309339, 10526.942113769623, 9815.733965004321, 8586.05974489884, 7549.196022619308, 6646.141731635911, 5835.645597342913, 5097.115540454137, 4418.035274282339, 3789.5593785950255, 3205.2628845210947, 2658.6015095883554, 2274.725705348264, 2254.4560470016236, 2234.2751069551605, 2143.9829150366454, 1897.2927276143064, 1656.4887170530435, 1421.4847412639022, 1191.9652889438523, 967.367547294151, 747.5683513351748, 532.2462079677715, 321.0786444349109, 114.04799823594456, 0.0]


# lev = [100.0, 200.0, 300.0, 500.0, 700.0, 1000.0, 2000.0, 3000.0, 5000.0, 7000.0, 10000.0, 12500.0, 15000.0, 17500.0, 20000.0, 22500.0, 25000.0, 30000.0, 35000.0, 40000.0, 45000.0, 50000.0, 55000.0, 60000.0, 65000.0, 70000.0, 73700.0, 73900.0, 74100.0, 75000.0, 77500.0, 80000.0, 82500.0, 85000.0, 87500.0, 90000.0, 92500.0, 95000.0, 97500.0, 98897.29226050233]
# lev = reverse(lev)
# ================================================================================================================================================================ #



# ================================================================================================================================================================ #


# --------------------------------------------------------------------------- #
#input
# don't have bc have to convert
# omega = [0.0689441324567163, 0.018601494247351285, 0.021586949767148585, -0.0198081700590118, 0.0008729602420883373, 0.02371155785651021, -0.00855045241800271, -0.005811092472464776, 0.0006139748555038891, 0.0168843919504238, -0.009646556206486205, -0.006270549174022626, 0.006732173115450085, 0.010498548457957849, 0.013839470816738654, 0.009499773542600834, -0.003270777650673191, -0.022438284639654672, -0.018138221828806828, -0.025622008450603178, -0.022464950321425904, -0.008664653834707478, 0.001407488342779453, 0.003940785549045592, 0.00868309884126105, 0.00870066686057692, 0.008735713112905568, 0.00871763285360348, 0.008718068996567185, 0.008731641354188078, 0.007564288199206238, 0.006104646460491195, 0.004425989321448251, 0.0029448475972575702, 0.0017023783729773387, 0.0009601629876168848, 0.0009264094911733292, 0.0006414507277809865, 0.0002316123582038783, -0.0]
# what we got 
# omega_nudge = [0.0689441324567163, 0.018601494247351285, 0.021586949767148585, -0.0198081700590118, 0.0008729602420883373, 0.02371155785651021, -0.00855045241800271, -0.005811092472464776, 0.0006139748555038891, 0.0168843919504238, -0.009646556206486205, -0.006270549174022626, 0.006732173115450085, 0.010498548457957849, 0.013839470816738654, 0.009499773542600834, -0.003270777650673191, -0.022438284639654672, -0.018138221828806828, -0.025622008450603178, -0.022464950321425904, -0.008664653834707478, 0.001407488342779453, 0.003940785549045592, 0.00868309884126105, 0.00870066686057692, 0.008735713112905568, 0.00871763285360348, 0.008718068996567185, 0.008731641354188078, 0.007564288199206238, 0.006104646460491195, 0.004425989321448251, 0.0029448475972575702, 0.0017023783729773387, 0.0009601629876168848, 0.0009264094911733292, 0.0006414507277809865, 0.0002316123582038783, -0.0]
# omega_nudge = reverse(omega_nudge)
# w = pyinterp(old_z, old_z, omega; method=:Dierckx, bc="extrapolate", return_spl=true)
# spl_smooth = pyinterp(new_z, old_z, omega_nudge; method=:pchip_smooth_derivative, bc="extrapolate", return_spl=true, f_enhancement_factor=1, f_p_enhancement_factor=1)


# plot(
#     omega_nudge,
#     old_z,
#     label="omega(z)",
#     lw=2,
#     legend = :bottomright,
#     dpi = dpi,
#     marker = :circle,
#     markersize = 5.0,
#     markerstrokewidth = 0.2,
#     color = :black,
#     ylims = (-100, 4900),
#     xlim = (-0.0041, .0091),
#     minorgrid = true,
# )
# plot!(spl_smooth.(new_z), new_z, label="omega_smooth(z)", lw=2, linestyle=:dot, color=:red, marker = :circle, markersize = 1.0, markerstrokewidth = 0.2)
# plot!()
# vertical line at 0
# vline!([0], label="w = 0", color="black", linestyle=:dash)
# savefig(joinpath(outpath, "pchip_test", "omega(z).png"))

# --------------------------------------------------------------------------- #

# q_in_real = reverse(LES_in_data["q"][:][1,1,:,1][:])

input_q_L = LES_in_data["q"][1, 1, :, 1][:]

input_q_L = input_q_L ./ (1 .+ input_q_L) # input to mixing ratio
# SSCFout.qt_nudge[:] .= SSCFout.qt_nudge ./(1 .- SSCFout.qt_nudge)

#input 
# q_in = [4.0570837325538955e-6, 3.878708196813387e-6, 3.7003326610728776e-6, 3.521957125333236e-6, 3.343581589592727e-6, 3.165206053852218e-6, 3.022505625259811e-6, 2.986830518111709e-6, 2.8084549823712e-6, 2.8084549823712e-6, 2.630079446630691e-6, 2.630079446630691e-6, 2.630079446630691e-6, 2.8084549823712e-6, 3.3328790574482965e-6, 4.14270398970934e-6, 5.894351750679611e-6, 1.6175917630754325e-5, 3.2158365633090786e-5, 4.273603490249429e-5, 5.2553824389643806e-5, 7.573550901446149e-5, 9.979123376440675e-5, 0.00013670069961980265, 0.00023155472919533413, 0.0003542429059743881, 0.0007306963205337525, 0.0010847300291061401, 0.0015356799733095786, 0.0015924761862504625, 0.0017141961145682625, 0.0018768185277631942, 0.002072617620229721, 0.0019257424473762513, 0.0021404151916503905, 0.00241292142868042, 0.0023815269470214844, 0.0021495237350463866, 0.0026412579650232334]
# # qg_in = does not exist 
# qg = 0.0029078267131820972
# q_in = [q_in; qg]
# # what we got
# qt_nudge = [4.057067272692262e-6, 3.878693152494463e-6, 3.7003189686617413e-6, 3.5219447211949303e-6, 3.34357041009226e-6, 3.165196035354565e-6, 3.0224964897471683e-6, 2.9868215969818115e-6, 2.808447094973964e-6, 2.808447094973964e-6, 2.6300725293309885e-6, 2.6300725293309885e-6, 2.6300725293309885e-6, 2.808447094973964e-6, 3.3328679494025067e-6, 4.142686827784091e-6, 5.894317007501839e-6, 1.6175655974675654e-5, 3.2157331505866436e-5, 4.273420861186352e-5, 5.255106263032685e-5, 7.572977358151175e-5, 9.978127646772145e-5, 0.00013668201509271403, 0.00023150112401525437, 0.00035411746237545995, 0.0007301627932673214, 0.0010835546648230285, 0.0015333252763900572, 0.0015899442379141181, 0.001711262674740217, 0.001873302678587912, 0.0020683307614490784, 0.0019220410912612084, 0.002135843599562897, 0.0024071132535297174, 0.002375868751567041, 0.002144913193227929, 0.00263430009890474, 0.0029078267131820972]

# q_in = reverse(q_in)
# qt_nudge = reverse(qt_nudge)
# q_in = pyinterp(old_z, old_z, q_in; method=:Dierckx, bc="extrapolate", return_spl=true)
# spl_smooth = pyinterp(new_z, old_z, q_in; method=:pchip_smooth_derivative, bc="extrapolate", return_spl=true, f_enhancement_factor=5, f_p_enhancement_factor=8)
plot(
    # q_in,
    # old_z,
    input_q_L,
    old_z_L,
    label = "q_in(z)",
    lw = 0.25,
    legend = :topright,
    dpi = dpi * 4,
    marker = :circle,
    markersize = 0.25,
    markerstrokewidth = 0.025,
    color = :black,
    ylims = (-100, 4900),
    # xlim = (0, 0.0028), # 9
    xlim = (0, 0.005), # 13
    minorgrid = true,
)
# plot!(spl_smooth.(new_z), new_z, label="q_smooth(z)", lw=.5, linestyle=:dot, color=:red, marker = :circle, markersize = 0.25, markerstrokewidth = 0.025)
# plot!(qt_nudge, old_z, label="q_nudge(z)", lw=.5, linestyle=:dot, color=:blue, marker = :circle, markersize = 0.25, markerstrokewidth = 0.025)

# plot!( q_in_real, old_z[2:end], label="q_in_real(z)", lw=.25, linestyle=:dot, color=:purple, marker = :circle, markersize = 0.25, markerstrokewidth = 0.025)

plot!(
    SSCFout.qt_nudge,
    z_SSCF,
    label = "q_sscf(z)",
    lw = 0.03,
    color = :cyan,
    marker = :circle,
    markersize = 0.1,
    markerstrokewidth = 0.005,
)
plot!(
    SSCFout_lesz.qt_nudge,
    z_SSCF,
    label = "q_sscf_lesz(z)",
    lw = 0.03,
    color = :magenta,
    marker = :circle,
    markersize = 0.1,
    markerstrokewidth = 0.005,
)
savefig(joinpath(outpath, "pchip_test", "q(z).png"))

# --------------------------------------------------------------------------- #
# input 
# T_in = [270.1995358747312, 271.491853711981, 264.66169192367835, 254.39951764043985, 245.56318333855592, 240.3947700616327, 231.80883957877097, 228.891149357076, 226.4982927915522, 226.82898764053874, 226.96912919780084, 227.87329200240646, 227.56650058982146, 228.99123733564977, 230.2427048129979, 230.75570933269347, 230.7010072378514, 230.36445911148962, 229.45073493232331, 232.86006980810896, 237.54183363624094, 241.56144163061776, 245.3625783453703, 248.3100559262735, 250.56016043185605, 253.59022494950955, 255.7461354302619, 255.22323726581826, 254.41980685337265, 255.08936691847282, 257.4900041725251, 259.58967728526727, 261.06013908864617, 263.6792255439185, 265.3640244587275, 267.3134081104423, 269.18683252198093, 271.42147063283096, 272.67124007894427]
# Tg_in = 278.3704840626871
# Tg = 274.3204840626871
# T_in = [T_in; Tg_in]

# T_in_real = reverse(LES_in_data["T"][:][1,1,:,1][:])

input_q_T = LES_in_data["T"][1, 1, :, 1][:] .* (1000 ./ input_lev) .^ 0.286

#  what we got
# θ_nudge = [1944.5835710665965, 1602.8407093918106, 1391.595245076395, 1155.9867693177894, 1013.5589888761049, 896.093129986276, 708.8423198654262, 623.3570815972575, 533.0740425693108, 484.9202476135982, 438.2085983376255, 412.7803095729882, 391.3007482909537, 376.7849606884522, 364.66277508553725, 353.3808232892484, 342.8201851026278, 324.9442209141309, 309.70963044731946, 302.54570367068675, 298.41522748036755, 294.465624449812, 291.0640848421155, 287.3277443129354, 283.3755290509006, 280.7930868142308, 279.0415072417078, 278.25342445813305, 277.16070341286894, 276.93217585959337, 276.9333890511754, 276.67086727628293, 275.8029519235561, 276.2056440134155, 275.6783137734898, 275.47785551306595, 275.2466480289731, 275.4264077960204, 274.64953535062017, 275.1903215901881]
# T_in = reverse(T_in)
# θ_nudge = reverse(θ_nudge)

# θ_in = pyinterp(old_z, old_z, θ; method=:Dierckx, bc="extrapolate", return_spl=true)
f_enhancement_factor = 5
f_p_enhancement_factor = 6
# spl_smooth_T = pyinterp(new_z, old_z, T_in; method=:pchip_smooth_derivative, bc="extrapolate", return_spl=true, f_enhancement_factor=f_enhancement_factor, f_p_enhancement_factor=f_p_enhancement_factor)
# spl_smooth_θ = pyinterp(new_z, old_z, θ_nudge; method=:pchip_smooth_derivative, bc="extrapolate", return_spl=true, f_enhancement_factor=f_enhancement_factor, f_p_enhancement_factor=f_p_enhancement_factor)
# spl_smooth_θ = pyinterp(new_z, old_z, θ_nudge; method=:Spline1D, bc="extrapolate", return_spl=true, f_enhancement_factor=f_enhancement_factor, f_p_enhancement_factor=f_p_enhancement_factor)

plot(
    # T_in,
    # old_z,
    input_q_T,
    old_z_L,
    label = "θ(z)",
    lw = 0.5,
    legend = :right,
    dpi = dpi * 4,
    marker = :circle,
    markersize = 0.25,
    markerstrokewidth = 0.025,
    color = :black,
    ylims = (-100, 4900),
    # xlim = (270, 295), # 9
    xlim = (275, 300), # 13
    minorgrid = true,
)
# plot!(spl_smooth_T.(new_z), new_z, label="θ_smooth(z)", lw=.5, linestyle=:dot, color=:red, marker = :circle, markersize = .25, markerstrokewidth = 0.05)
# twin axis
ax2 = twiny()
# plot!( ax2, θ_nudge, old_z, label="θ_nudge(z)", lw=.5, linestyle=:dot, color=:blue, marker = :circle, markersize = .25, markerstrokewidth = 0.025, ylims = (-100, 4900),xlim = (270, 300))
# plot!( ax2, spl_smooth_θ.(new_z), new_z, label="θ_nudge_smooth(z)", lw=.5, linestyle=:dot, color=:green, marker = :circle, markersize = 0.25, markerstrokewidth = 0.025, ylims = (-100, 4900),xlim = (270, 300))
# plot!( T_in_real, old_z[2:end], label="q_in_real(z)", lw=.5, linestyle=:dot, color=:purple, marker = :circle, markersize = .25, markerstrokewidth = 0.025)

# H_nudge_320 =  [275.13104980901556, 275.0174376588642, 274.9091836777308, 274.80657237016504, 274.70979340586666, 274.67378262369425, 274.7410235730707, 274.80364921174777, 274.8618471539815, 274.9158425368792, 274.9658980203994, 275.01246387875665, 275.0559903861655, 275.097002862543, 275.1361016735085, 275.17403727608644, 275.2115601273009, 275.2490829785155, 275.28660582973004, 275.32412868094457, 275.3616515321591, 275.3991743833736, 275.4240736489235, 275.41556163404044, 275.40704961915736, 275.3985376042742, 275.39002558939114, 275.38151357450806, 275.373001559625, 275.3644895447419, 275.3559775298588, 275.34746551497574, 275.33895350009266, 275.3304414852096, 275.32192947032644, 275.3134174554434, 275.3049054405603, 275.29639342567714, 275.28788141079406, 275.27936939591103, 275.2708573810279, 275.2623453661448, 275.25383335126173, 275.24832149912095, 275.2590584270762, 275.26979535503136, 275.28053228298654, 275.2912692109417, 275.3020061388969, 275.3127430668521, 275.32347999480726, 275.3342169227625, 275.3449538507177, 275.35569077867285, 275.3664277066281, 275.3771646345832, 275.38790156253845, 275.3986384904936, 275.4093754184488, 275.420112346404, 275.43084927435916, 275.4415862023144, 275.4523231302696, 275.4630600582248, 275.47379698617993, 275.483527897143, 275.4926474421566, 275.5017669871703, 275.5108865321839, 275.5200060771976, 275.52912562221127, 275.5382451672249, 275.5473647122385, 275.5564842572522, 275.5656038022658, 275.5747233472795, 275.5838428922931, 275.5929624373067, 275.60208198232044, 275.61120152733406, 275.6203210723477, 275.62944061736135, 275.63856016237503, 275.64767970738865, 275.6567992524023, 275.66591879741594, 275.6750383424296, 275.6933591678578, 275.71683700423796, 275.7403148406182, 275.7637926769984, 275.7872705133786, 275.8107483497588, 275.834226186139, 275.8577040225192, 275.88118185889937, 275.9046596952796, 275.9281375316598, 275.95161536804, 275.9750932044202, 275.99857104080036, 276.02204887718057, 276.0455267135608, 276.0690045499409, 276.0924823863212, 276.11596022270135, 276.13943805908156, 276.16291589546177, 276.1863937318419, 276.20248632579853, 276.18495002488606, 276.16741372397365, 276.1498774230612, 276.13234112214866, 276.1148048212362, 276.0972685203238, 276.0797322194113, 276.06219591849884, 276.0446596175863, 276.02712331667385, 276.00958701576144, 275.992050714849, 275.9745144139365, 275.956978113024, 275.93944181211157, 275.92190551119904, 275.90436921028663, 275.88683290937416, 275.8692966084617, 275.85176030754917, 275.83422400663676, 275.81668770572423, 275.8109543331821, 275.84787894076004, 275.8848035483379, 275.9217281559159, 275.9586527634938, 275.9955773710717, 276.0325019786496, 276.0694265862275, 276.10635119380544, 276.14327580138337, 276.18020040896124, 276.21712501653917, 276.2540496241171, 276.290974231695, 276.32789883927296, 276.36482344685083, 276.40174805442877, 276.43867266200664, 276.47559726958457, 276.5125218771625, 276.54944648474043, 276.5863710923183, 276.62329569989623, 276.66022030747416, 276.6786234273401, 276.6895221552136, 276.700420883087, 276.7113196109605, 276.72221833883395, 276.7331170667074, 276.74401579458083, 276.7549145224543, 276.76581325032777, 276.77671197820126, 276.7876107060747, 276.7985094339482, 276.8094081618216, 276.8203068896951, 276.8312056175685, 276.842104345442, 276.85300307331545, 276.86390180118894, 276.8748005290623, 276.8856992569358, 276.89659798480926, 276.9074967126827, 276.9183954405562, 276.9292941684297, 276.9333583590354, 276.93330919488255, 276.9332600307296, 276.93321086657676, 276.9331617024239, 276.93311253827096, 276.9330633741181, 276.9330142099652, 276.9329650458123, 276.9329158816594, 276.9328667175065, 276.93281755335363, 276.93276838920076, 276.9327192250479, 276.932670060895, 276.9326208967421, 276.9325717325892, 276.9325225684363, 276.9324734042834, 276.93242424013056, 276.9323750759777, 276.93232591182476, 276.9322767476719, 276.932227583519, 276.9321784193661, 276.9561531605606, 276.9814474287444, 277.0067416969282, 277.03203596511196, 277.0573302332958, 277.0826245014796, 277.10791876966334, 277.13321303784716, 277.15850730603097, 277.65476439413584, 278.19579927445426, 278.6008544047283, 278.9896999758492, 279.0810554166068, 279.1266826714774, 279.172309926348, 279.2179371812187, 279.2635644360894, 279.30919169095995, 279.35481894583063, 279.40044620070125, 279.4460734555719, 279.49170071044256, 279.5373279653132, 279.58295522018386, 279.6285824750545, 279.6742097299251, 279.71983698479573, 279.7654642396664, 279.81109149453704, 279.8567187494077, 279.90234600427834, 279.94797325914897, 279.9936005140196, 280.03922776889027, 280.0848550237609, 280.1304822786316, 280.1761095335022, 280.2217367883728, 280.26736404324345, 280.3129912981141, 280.35861855298475, 280.40424580785543, 280.44987306272606, 280.4955003175967, 280.5411275724673, 280.586754827338, 280.6323820822086, 280.67800933707923, 280.7236365919499, 280.76926384682054, 280.8156634478242, 280.86304863050503, 280.9107645173521, 280.9590945690794, 281.0082750029485, 281.05849479276867, 281.110037399254, 281.16304455276133, 281.2177997140046, 281.27444461334096, 281.33321546803177, 281.3943012518865, 281.45789093871434, 281.524220745777, 281.5933851599791, 281.66562039858223, 281.7410681919434, 281.81987027041953, 281.90226285127227, 281.9883876648586, 282.0783391980832, 282.17225918130293, 282.27038383177955, 282.37271314951295, 282.47948335176477, 282.59078892543977, 282.70677160089474, 282.82747862158215, 282.95305171785884, 283.0836326200819, 283.219315815156, 283.36010130308097, 283.5626233351589, 283.77952333505823, 284.00413593632646, 284.23659644775955, 284.4770401781533, 284.72553478190576, 284.9822155678129, 285.24708253587465, 285.520270994887, 285.80178094485007, 286.09168004016163, 286.39003593521977, 286.69691628442234, 287.0122534333715, 287.33516042874476, 287.62739869784286, 287.92712873131654, 288.2344099876133, 288.5491830082857, 288.87150725178117, 289.2013232596523, 289.53869049034654, 289.8834305685216, 290.23560295262484, 290.59514818420894, 290.9620068048264, 291.29336721208136, 291.6146789164077, 291.94205310572124, 292.275339470477, 292.6145380106749, 292.95954851995145]
# plot!(ax2, H_nudge_320, new_z, label="H_nudge_320(z)", lw=.5, linestyle=:dot, color=:cyan, marker = :circle, markersize = 0.25, markerstrokewidth = 0.025)

plot!(
    SSCFout.H_nudge,
    z_SSCF,
    label = "q_sscf(z)",
    lw = 0.03,
    color = :cyan,
    marker = :circle,
    markersize = 0.1,
    markerstrokewidth = 0.005,
)
plot!(
    SSCFout_lesz.H_nudge,
    z_SSCF,
    label = "q_sscf_lesz(z)",
    lw = 0.03,
    color = :magenta,
    marker = :circle,
    markersize = 0.1,
    markerstrokewidth = 0.005,
)
savefig(joinpath(outpath, "pchip_test", "θ(z).png"))

# --------------------------------------------------------------------------- #



# construct thermodynamic states, then calcualte T from them...
